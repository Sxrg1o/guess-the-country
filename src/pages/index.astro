---
import * as d3 from 'd3-geo';
import { feature } from 'topojson-client';
import type { Feature, Geometry } from 'geojson';
import '../styles.css';

interface CountryProperties {
  name: string;
}

interface CountryFeature {
  type: "Feature";
  id: string;
  properties: CountryProperties;
  geometry: Geometry;
}

interface CountryPath {
  id: string;
  d: string;
  name: string;
}

interface ProjectionConfig {
  scale: number;
  center: [number, number];
}

function getCountryProjection(country: Feature<Geometry>): ProjectionConfig {
  const projection = d3.geoMercator();
  const path = d3.geoPath().projection(projection);
  const bounds = path.bounds(country);
  const width = 1000;
  const height = 640;
  const dx = bounds[1][0] - bounds[0][0];
  const dy = bounds[1][1] - bounds[0][1];
  const x = (bounds[0][0] + bounds[1][0]) / 2;
  const y = (bounds[0][1] + bounds[1][1]) / 2;
  
  let scale = 9 / Math.max(dx / width, dy / height);
  
  const MIN_SCALE = 250;  
  const MAX_SCALE = 850; 
  
  scale = Math.max(MIN_SCALE, Math.min(MAX_SCALE, scale));
  
  const center = projection.invert!([x, y]);
  if (!center) {
    return {
      scale: scale,
      center: [0, 0]
    };
  }
  
  return {
    scale: scale,
    center: center as [number, number]
  };
}

const response = await fetch('https://unpkg.com/world-atlas@2/countries-110m.json');
const topology = await response.json();
const geojson = feature(topology, topology.objects.countries) as any;
const countries = Array.isArray(geojson.features) ? geojson.features : [geojson] as CountryFeature[];
const randomCountry = countries[Math.floor(Math.random() * countries.length)];
const config = getCountryProjection(randomCountry);
const projection = d3.geoMercator()
  .scale(config.scale)
  .center(config.center)
  .translate([480, 300]);
const path = d3.geoPath().projection(projection);
const paths = countries.map((country: CountryFeature): CountryPath => ({
  id: country.id || '',
  d: path(country.geometry) || '',
  name: country.properties.name
}));
const countryName = randomCountry.properties.name;
---
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title>Guess the Country!</title>
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
</head>
<body>
  <div class="container">
    <h1>Guess the Country!</h1>
    
    <svg width="960" height="600">
      {paths.map((country: CountryPath) => (
        <path
          class={`country ${country.id === randomCountry.id ? 'highlighted' : ''}`}
          d={country.d}
        />
      ))}
    </svg>

    <form class="guess-form">
      <input 
        type="text" 
        name="guess" 
        placeholder="Enter the country name"
        autocomplete="off"
      />
      <button type="submit">Guess</button>
    </form>
  </div>

  <script define:vars={{ countryName }}>  
    const form = document.querySelector('form');
    const correctCountry = countryName;

    form?.addEventListener('submit', (e) => {
      e.preventDefault();
      const guess = new FormData(e.target).get('guess');
      if (guess?.toString().toLowerCase() === correctCountry.toLowerCase()) {
        // Lanzar confeti al acertar
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 }
        });
        setTimeout(() => {
          window.location.reload();
        }, 1000); 
      } else {
        // Mostrar borde rojo de error
        document.body.classList.add('error');
        setTimeout(() => {
          document.body.classList.remove('error');
          window.location.reload();
        }, 1000); 
      }
    });
  </script>
</body>
</html>