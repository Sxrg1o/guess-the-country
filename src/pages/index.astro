---
import * as d3 from 'd3-geo';
import { feature } from 'topojson-client';
import type { Feature, Geometry } from 'geojson';
import '../styles.css';

interface CountryProperties {
  name: string;
}

interface CountryFeature {
  type: "Feature";
  id: string;
  properties: CountryProperties;
  geometry: Geometry;
}

interface CountryPath {
  id: string;
  d: string;
  name: string;
}

interface ProjectionConfig {
  scale: number;
  center: [number, number];
}

function getCountryProjection(country: Feature<Geometry>): ProjectionConfig {
  const projection = d3.geoMercator();
  const path = d3.geoPath().projection(projection);
  const bounds = path.bounds(country);
  const width = 1000;
  const height = 640;
  const dx = bounds[1][0] - bounds[0][0];
  const dy = bounds[1][1] - bounds[0][1];
  const x = (bounds[0][0] + bounds[1][0]) / 2;
  const y = (bounds[0][1] + bounds[1][1]) / 2;
  let scale = 9 / Math.max(dx / width, dy / height);
  const MIN_SCALE = 250;
  const MAX_SCALE = 850;
  scale = Math.max(MIN_SCALE, Math.min(MAX_SCALE, scale));
  const center = projection.invert!([x, y]);
  
  if (!center) {
    return {
      scale: scale,
      center: [0, 0]
    };
  }
  
  return {
    scale: scale,
    center: center as [number, number]
  };
}

const response = await fetch('https://unpkg.com/world-atlas@2/countries-110m.json');
const topology = await response.json();
const geojson = feature(topology, topology.objects.countries) as any;
const countries = Array.isArray(geojson.features) ? geojson.features : [geojson] as CountryFeature[];
const randomCountry = countries[Math.floor(Math.random() * countries.length)];
const config = getCountryProjection(randomCountry);

const projection = d3.geoMercator()
  .scale(config.scale)
  .center(config.center)
  .translate([480, 300]);

const path = d3.geoPath().projection(projection);

const paths = countries.map((country: CountryFeature): CountryPath => ({
  id: country.id || '',
  d: path(country.geometry) || '',
  name: country.properties.name
}));

const countryName = randomCountry.properties.name;
const allCountryNames = paths.map((path : CountryPath) => path.name);
---

<html lang="es">
<head>
  <meta charset="utf-8" />
  <title>Guess the Country!</title>
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
</head>
<body>
  <div class="container">
    <h1>Guess the Country!</h1>
    <svg width="900" height="600">
      {paths.map((country: CountryPath) => (
        <path
          class={`country ${country.id === randomCountry.id ? 'highlighted' : ''}`}
          d={country.d}
        />
      ))}
    </svg>
    <div class="guess-container">
      <form class="guess-form">
        <div class="input-container">
          <input
            type="text"
            name="guess"
            placeholder="Enter the country name"
            autocomplete="off"
            id="countryInput"
          />
          <div id="suggestions" class="suggestions-dropdown hidden"></div>
        </div>
        <button type="submit">Guess</button>
      </form>
      <div id="error-message" class="error-message hidden">
        <p>Wrong! The correct answer was: <strong id="correct-country-name"></strong></p>
      </div>
    </div>
  </div>

  <script define:vars={{ countryName, allCountryNames }}>
    const form = document.querySelector('form');
    const input = document.getElementById('countryInput');
    const suggestionsDiv = document.getElementById('suggestions');
    const errorMessageDiv = document.getElementById('error-message');
    const correctCountryNameSpan = document.getElementById('correct-country-name');
    const correctCountry = countryName;
    let currentFocus = -1;

    function filterCountries(value) {
      if (!value) return [];
      const filtered = allCountryNames.filter(country =>
        country.toLowerCase().includes(value.toLowerCase())
      );
      return filtered.slice(0, 5); 
    }

    function updateSuggestions(suggestions) {
      suggestionsDiv.innerHTML = '';
      suggestions.forEach((country, index) => {
        const div = document.createElement('div');
        div.className = 'suggestion-item';
        div.textContent = country;
        div.setAttribute('data-index', index);
        div.addEventListener('click', () => {
          input.value = country;
          suggestionsDiv.classList.add('hidden');
          currentFocus = -1;
        });
        suggestionsDiv.appendChild(div);
      });
      
      if (suggestions.length > 0) {
        suggestionsDiv.classList.remove('hidden');
        currentFocus = -1; 
      } else {
        suggestionsDiv.classList.add('hidden');
      }
    }

    function addActive() {
      const items = suggestionsDiv.querySelectorAll('.suggestion-item');
      if (!items.length) return;

      items.forEach(item => item.classList.remove('active'));
      
      if (currentFocus >= items.length) currentFocus = 0;
      if (currentFocus < 0) currentFocus = items.length - 1;
      items[currentFocus].classList.add('active');
    }

    input?.addEventListener('input', (e) => {
      const value = e.target.value;
      const filtered = filterCountries(value);
      updateSuggestions(filtered);
    });

    input?.addEventListener('keydown', (e) => {
      if (suggestionsDiv.classList.contains('hidden')) return;
      
      const items = suggestionsDiv.querySelectorAll('.suggestion-item');
      
      if (e.key === 'ArrowDown') {
        currentFocus++;
        addActive();
        e.preventDefault();
      } 
      else if (e.key === 'ArrowUp') {
        currentFocus--;
        addActive();
        e.preventDefault();
      } 
      else if (e.key === 'Enter' && currentFocus > -1) {
        if (items[currentFocus]) {
          e.preventDefault();
          input.value = items[currentFocus].textContent;
          suggestionsDiv.classList.add('hidden');
          currentFocus = -1;
        }
      } 
      else if (e.key === 'Escape') {
        suggestionsDiv.classList.add('hidden');
        currentFocus = -1;
      }
    });

    document.addEventListener('click', (e) => {
      if (!input.contains(e.target) && !suggestionsDiv.contains(e.target)) {
        suggestionsDiv.classList.add('hidden');
        currentFocus = -1;
      }
    });

    form?.addEventListener('submit', (e) => {
      e.preventDefault();
      const guess = new FormData(e.target).get('guess');
      
      if (guess?.toString().toLowerCase() === correctCountry.toLowerCase()) {
        errorMessageDiv.classList.add('hidden');
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 }
        });
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        document.body.classList.add('error');
        correctCountryNameSpan.textContent = correctCountry;
        errorMessageDiv.classList.remove('hidden');
        input.disabled = true;
        setTimeout(() => {
          document.body.classList.remove('error');
          window.location.reload();
        }, 2000);
      }
    });
  </script>
</body>
</html>